{"version":3,"file":"commonHelpers.js","sources":["../src/img/octagon.svg","../src/js/1-timer.js"],"sourcesContent":["export default \"__VITE_ASSET__de411352__\"","// Описаний в документації\nimport flatpickr from \"flatpickr\";\n// Додатковий імпорт стилів\nimport \"flatpickr/dist/flatpickr.min.css\";\n\n// Описаний у документації\nimport iziToast from \"izitoast\";\n// Додатковий імпорт стилів\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nimport imgUrl from '../img/octagon.svg';\n\n\n\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        console.log(selectedDates);\n        dateCheck(selectedDates[0]);\n        \n        // const timer = setTimeout(convertMs(userSelectedMilli), 1000);\n  }\n}\n\n  const flatP = flatpickr('#datetime-picker', options);\n  const inputForm = document.getElementById('datetime-picker');\n  const startButton = document.querySelector('button[type=\"button\"]')\n  \n    let timer;\n\n          const dataDay = document.querySelector('[data-days]');\n          const dataHour = document.querySelector('[data-hours]');\n          const dataMinutes = document.querySelector('[data-minutes]');\n          const dataSeconds = document.querySelector('[data-seconds]');\n\n\nfunction dateCheck(selectedDates) {\nconst currentDate = Date.now();\nif (currentDate < selectedDates) {\n\n            inputForm.disabled = false;\n            startButton.disabled = false;\n}\nelse {\n  iziToast.show({\n                title: 'Warning',\n                titleColor: 'white',\n                message: 'Please choose a date in the future',\n                messageColor: 'white',\n                messageLineHeight: '150%',\n                backgroundColor: '#ef4040',\n                iconUrl: imgUrl,\n                position: 'topRight'\n            });\n    \n            startButton.disabled = true;\n}\n}\n\nfunction settingTime () {\n            \n            inputForm.disabled = true;\n            startButton.disabled = true;\n\n  let userSelectedDateMilli = flatP.selectedDates[0].getTime();\n        \n      let dateNow = Date.now();\n      const difference = userSelectedDateMilli - dateNow;\n\n      const remainTime = addLeadingZero(convertMs(difference));\n\n                dataDay.textContent = remainTime.days;\n                dataHour.textContent = remainTime.hours;\n                dataMinutes.textContent = remainTime.minutes;\n                dataSeconds.textContent = remainTime.seconds;\n\n                if (difference <= 1000) {\n                  clearInterval(timer);\n                  inputForm.disabled = false;\n              }\n\n}\n\n\nfunction convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n  \n    // Remaining days\n    const days = Math.floor(ms / day);\n    // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n    // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  \n    return { days, hours, minutes, seconds };\n  }\n\n\n  \n  startButton.addEventListener('click', () => {\n    timer = setInterval(settingTime, 1000);\n});\n\nfunction addLeadingZero(remainTime) {\n    remainTime.days = remainTime.days.toString().padStart(2, '0');\n    remainTime.hours = remainTime.hours.toString().padStart(2, '0');\n    remainTime.minutes = remainTime.minutes.toString().padStart(2, '0');\n    remainTime.seconds = remainTime.seconds.toString().padStart(2, '0');\n    return remainTime;\n}\n\n// timer = setInterval(() => {\n//   let userSelectedDateMilli = userSelectedDate.getTime();\n//   console.log(userSelectedDateMilli);\n//   let dateNow = Date.now();\n//   console.log(dateNow);\n\n//  let remainTime = userSelectedDateMilli - dateNow;\n//   console.log(remainTime)\n\n// remainTime = convertMs(remainTime);\n// remainTime = addLeadingZero(remainTime);\n// settingTime(remainTime);\n\n//   if (remainTime <= 0) {\n//       clearInterval(timer);\n//       startButton.disabled = false;\n//       inputForm.disabled = false;\n//   }\n//    }, 1000);"],"names":["imgUrl","options","selectedDates","dateCheck","flatP","flatpickr","inputForm","startButton","timer","dataDay","dataHour","dataMinutes","dataSeconds","iziToast","settingTime","userSelectedDateMilli","dateNow","difference","remainTime","addLeadingZero","convertMs","ms","days","hours","minutes","seconds"],"mappings":"+IAAA,MAAeA,EAAA,6CCeTC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnB,QAAQ,IAAIA,CAAa,EACzBC,EAAUD,EAAc,CAAC,CAAC,CAG/B,CACH,EAEQE,EAAQC,EAAU,mBAAoBJ,CAAO,EAC7CK,EAAY,SAAS,eAAe,iBAAiB,EACrDC,EAAc,SAAS,cAAc,uBAAuB,EAEhE,IAAIC,EAEE,MAAMC,EAAU,SAAS,cAAc,aAAa,EAC9CC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAGrE,SAAST,EAAUD,EAAe,CACd,KAAK,MACPA,GAENI,EAAU,SAAW,GACrBC,EAAY,SAAW,KAGjCM,EAAS,KAAK,CACA,MAAO,UACP,WAAY,QACZ,QAAS,qCACT,aAAc,QACd,kBAAmB,OACnB,gBAAiB,UACjB,QAASb,EACT,SAAU,UAC1B,CAAa,EAEDO,EAAY,SAAW,GAEnC,CAEA,SAASO,GAAe,CAEZR,EAAU,SAAW,GACrBC,EAAY,SAAW,GAEjC,IAAIQ,EAAwBX,EAAM,cAAc,CAAC,EAAE,QAAO,EAElDY,EAAU,KAAK,MACnB,MAAMC,EAAaF,EAAwBC,EAErCE,EAAaC,EAAeC,EAAUH,CAAU,CAAC,EAE7CR,EAAQ,YAAcS,EAAW,KACjCR,EAAS,YAAcQ,EAAW,MAClCP,EAAY,YAAcO,EAAW,QACrCN,EAAY,YAAcM,EAAW,QAEjCD,GAAc,MAChB,cAAcT,CAAK,EACnBF,EAAU,SAAW,GAGvC,CAGA,SAASc,EAAUC,EAAI,CAQnB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAIDlB,EAAY,iBAAiB,QAAS,IAAM,CAC1CC,EAAQ,YAAYM,EAAa,GAAI,CACzC,CAAC,EAED,SAASK,EAAeD,EAAY,CAChC,OAAAA,EAAW,KAAOA,EAAW,KAAK,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC5DA,EAAW,MAAQA,EAAW,MAAM,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC9DA,EAAW,QAAUA,EAAW,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,EAClEA,EAAW,QAAUA,EAAW,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC3DA,CACX"}